#!/usr/bin/env bash

set -o errexit
# Check if $IMAGE is not set or is empty

if [ -z "$IMAGE" ]; then
  echo "ERROR: IMAGE environment variable is not set."
  exit 1
fi

echo "Deploying image $IMAGE to Kubernetes..."

export KUBECONFIG="{{ kubeconfig }}"

# Create new release job

release_job_id=$(head -c 12 /dev/urandom | base64 | tr -dc 'a-z0-9' | head -c 12)
release_job_name="django-release-job-$release_job_id"

release_job_yaml=$(cat <<EOF
apiVersion: batch/v1
kind: Job
metadata:
  name: $release_job_name
spec:
  backoffLimit: 0
  template:
    spec:
      containers:
        - name: django
          image: $IMAGE
          command: ["/bin/sh", "-c"]
          args: ["./release.sh"]
          envFrom:
            - configMapRef:
                name: configmap
            - secretRef:
                name: secrets
      restartPolicy: Never
      nodeSelector:
        role: jobrunner

EOF
)

echo "$release_job_yaml" | kubectl apply -f - -n default

# Wait for pod to be ready
kubectl wait --for=condition=Ready pod -l job-name="$release_job_name" -n default --timeout=30s

# Stream logs until the release job completes
kubectl logs --follow job/"$release_job_name" -n default

# Wait for the release job to complete
kubectl wait --for=condition=complete job/"$release_job_name" -n default --timeout=30s

# Delete the job
kubectl delete job "$release_job_name" -n default

# Update crons with new image
kubectl get cronjob -l app=django-cronjob -o name | xargs -I {} kubectl set image {} django="${IMAGE}" -n default

# Roll out the new image to the deployment
kubectl set image deployment/django-app django="${IMAGE}" -n default
kubectl rollout status deployment/django-app -n default
