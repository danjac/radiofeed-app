- name: Deploy Kubernetes
  environment:
      KUBECONFIG: "{{ kubeconfig }}"
  vars:
      memory_request_percent: 0.2
      memory_limit_percent: 0.5
      cpu_request_percent: 0.2
      cpu_limit_percent: 0.3
      cloudflare_cert: "cloudflare.pem"
      cloudflare_key: "cloudflare.key"
      cloudflare_certs:
          - "{{ cloudflare_cert }}"
          - "{{ cloudflare_key }}"
  block:
      - name: Copy Cloudflare certs to target node
        ansible.builtin.copy:
            src: "{{ playbook_dir }}/certs/{{ item }}"
            dest: "/tmp/{{ item | basename }}"
        loop: "{{ cloudflare_certs }}"

      - name: Create Kubernetes TLS Secret
        ansible.builtin.shell: |
            kubectl create secret tls cloudflare-origin-cert \
                --cert=/tmp/{{ cloudflare_cert }} \
                --key=/tmp/{{ cloudflare_key }} \
                -n default --dry-run=client -o yaml | kubectl apply -f -
        args:
            creates: "/tmp/cloudflare-origin-cert.created"

      - name: Remove certs from /tmp after secret is created
        file:
            path: "/tmp/{{ item }}"
            state: absent
        loop: "{{ cloudflare_certs }}"

      - name: Label the nodes
        ansible.builtin.shell: |
            kubectl label nodes {{ hostvars[item].hostname }} role={{ hostvars[item].role }} --overwrite
        loop: "{{ groups['all'] }}"

      - name: Force CoreDNS to run on the server node
        ansible.builtin.shell: |
            kubectl patch deployment coredns -n kube-system \
              --type='json' \
              -p='[{"op": "add", "path": "/spec/template/spec/nodeSelector", "value": {"role": "server"}}]'

      - name: Restart CoreDNS to apply changes
        ansible.builtin.shell: |
            kubectl rollout restart deployment/coredns -n kube-system

      - name: Force metrics-server to run on the server node
        ansible.builtin.shell: |
            kubectl patch deployment metrics-server -n kube-system \
              --type='json' \
              -p='[{"op": "add", "path": "/spec/template/spec/nodeSelector", "value": {"role": "server"}}]'

      - name: Restart metrics-server to apply changes
        ansible.builtin.shell: |
            kubectl rollout restart deployment/metrics-server -n kube-system
      - name: Force Traefik to run on the server node
        ansible.builtin.shell: |
            kubectl patch deployment traefik -n kube-system \
              --type='json' \
              -p='[{"op": "add", "path": "/spec/template/spec/nodeSelector", "value": {"role": "server"}}]'

      - name: Restart Traefik to apply changes
        ansible.builtin.shell: |
            kubectl rollout restart deployment/traefik -n kube-system

      - name: Get the current image of running django-app pod
        ansible.builtin.shell: |
            kubectl get pods -l app=django-app -o jsonpath='{.items[0].spec.containers[0].image}' -n default
        register: current_image
        changed_when: false
        ignore_errors: true

      - name: Set default image if current image is empty
        ansible.builtin.set_fact:
            image: "{{ current_image.stdout if current_image.stdout | length > 0 else docker_image }}"
        changed_when: false

      - name: Create a temporary directory
        ansible.builtin.tempfile:
            state: directory
        register: manifests_dir

      - name: Calculate total resources
        ansible.builtin.set_fact:
            total_memory_mb: "{{ ansible_memtotal_mb }}"
            total_cpu_millicores: "{{ ansible_processor_vcpus * 1000 }}"

      - name: Calculate resource requests/limits
        ansible.builtin.set_fact:
            mem_request: "{{ (total_memory_mb | int * memory_request_percent) | int }}Mi"
            mem_limit: "{{ (total_memory_mb | int  * memory_limit_percent) | int }}Mi"
            cpu_request: "{{ (total_cpu_millicores | int  * cpu_request_percent) | int }}m"
            cpu_limit: "{{ (total_cpu_millicores | int  * cpu_limit_percent) | int }}m"

      - name: Render Kubernetes manifests
        vars:
            database_url: "postgresql://postgres:{{ postgres_password }}@postgres.default.svc.cluster.local:5432/postgres"
            redis_url: "redis://redis.default.svc.cluster.local:6379/0"
            manage_cmd: "python ./manage.py"
            num_webapps: "{{ groups['agents'] | map('extract', hostvars, 'role') | select('equalto', 'webapp') | length }}"
        ansible.builtin.template:
            src: "{{ item }}.yaml.j2"
            dest: "{{ manifests_dir.path + '/' + item + '.yaml' }}"
        loop:
            - configmap
            - secrets
            - postgres_pv
            - postgres_pvc
            - postgres_statefulset
            - postgres_service
            - redis_deployment
            - redis_service
            - django_cronjobs
            - django_deployment
            - django_service
            - ingress_route

      - name: Delete all cronjobs
        ansible.builtin.shell: |
            kubectl delete cronjob -l app=django-cronjob -n default

      - name: Apply Kubernetes manifests using ApplySet
        ansible.builtin.shell: |
            kubectl apply -f {{ manifests_dir.path }} --prune --applyset=app-deployment --namespace=default
        environment:
            KUBECTL_APPLYSET: "true"

      - name: Delete manifests dir
        ansible.builtin.file:
            path: "{{ manifests_dir.path }}"
            state: absent

      - name: Restart statefulsets
        ansible.builtin.shell: |
            for statefulset in $(kubectl get statefulsets -n default -o jsonpath='{.items[*].metadata.name}'); do
              kubectl rollout restart statefulset/$statefulset -n default
            done

      - name: Restart deployments
        ansible.builtin.shell: |
            for deployment in $(kubectl get deployments -n default -o jsonpath='{.items[*].metadata.name}'); do
              kubectl rollout restart deployment/$deployment -n default
            done
